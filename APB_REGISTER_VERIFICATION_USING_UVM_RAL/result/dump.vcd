$date
Sat Jun 29 14:43:53 2024
$end
$version
Riviera-PRO Version 2023.04.112.8911
$end
$timescale
1 ns
$end

$scope module tb $end

$scope module vif $end
$var reg 32 ! paddr [31:0] $end
$var reg 32 " pwdata [31:0] $end
$var reg 32 # prdata [31:0] $end
$var reg 1 $ pwrite $end
$var reg 1 % psel $end
$var reg 1 & penable $end
$var reg 1 ' presetn $end
$var reg 1 ( pclk $end
$upscope $end


$scope module dut $end
$var wire 1 ) pclk $end
$var wire 1 * presetn $end
$var wire 32 + paddr [31:0] $end
$var wire 32 , pwdata [31:0] $end
$var wire 1 - psel $end
$var wire 1 . pwrite $end
$var wire 1 / penable $end
$var wire 32 0 prdata [31:0] $end
$var reg 4 1 cntrl [3:0] $end
$var reg 32 2 reg1 [31:0] $end
$var reg 32 3 reg2 [31:0] $end
$var reg 32 4 reg3 [31:0] $end
$var reg 32 5 reg4 [31:0] $end
$var reg 32 6 rdata_tmp [31:0] $end
$upscope $end

$upscope $end


$scope module uvm_pkg $end
$var integer 32 7 UVM_UNBOUNDED_CONNECTIONS $end
$var reg 1 8 uvm_start_uvm_declarations $end
$var integer 32 9 uvm_global_random_seed $end
$var parameter 32 : UVM_HDL_MAX_WIDTH [31:0] $end
$var parameter 32 ; UVM_STREAMBITS [31:0] $end
$var parameter 32 < UVM_RADIX [31:0] $end
$var parameter 32 = UVM_MACRO_NUMFLAGS [31:0] $end
$var parameter 32 > UVM_DEFAULT [31:0] $end
$var parameter 32 ? UVM_ALL_ON [31:0] $end
$var parameter 32 @ UVM_FLAGS_ON [31:0] $end
$var parameter 32 A UVM_FLAGS_OFF [31:0] $end
$var parameter 32 B UVM_COPY [31:0] $end
$var parameter 32 C UVM_NOCOPY [31:0] $end
$var parameter 32 D UVM_COMPARE [31:0] $end
$var parameter 32 E UVM_NOCOMPARE [31:0] $end
$var parameter 32 F UVM_PRINT [31:0] $end
$var parameter 32 G UVM_NOPRINT [31:0] $end
$var parameter 32 H UVM_RECORD [31:0] $end
$var parameter 32 I UVM_NORECORD [31:0] $end
$var parameter 32 J UVM_PACK [31:0] $end
$var parameter 32 K UVM_NOPACK [31:0] $end
$var parameter 32 L UVM_PHYSICAL [31:0] $end
$var parameter 32 M UVM_ABSTRACT [31:0] $end
$var parameter 32 N UVM_READONLY [31:0] $end
$var parameter 32 O UVM_NODEFPRINT [31:0] $end
$var parameter 32 P UVM_MACRO_EXTRAS [31:0] $end
$var parameter 32 Q UVM_FLAGS [31:0] $end
$var parameter 32 R UVM_UNPACK [31:0] $end
$var parameter 32 S UVM_CHECK_FIELDS [31:0] $end
$var parameter 32 T UVM_END_DATA_EXTRA [31:0] $end
$var parameter 32 U UVM_START_FUNCS [31:0] $end
$var parameter 32 V UVM_SET [31:0] $end
$var parameter 32 W UVM_SETINT [31:0] $end
$var parameter 32 X UVM_SETOBJ [31:0] $end
$var parameter 32 Y UVM_SETSTR [31:0] $end
$var parameter 32 Z UVM_END_FUNCS [31:0] $end
$var parameter 32 [ UVM_STR_CRC_POLYNOMIAL [31:0] $end
$var parameter 32 \ UVM_STDOUT [31:0] $end
$var parameter 32 ] UVM_LOG_UVM_RM_RECORD [31:0] $end
$var parameter 32 ^ UVM_LINE_WIDTH [31:0] $end
$var parameter 32 _ UVM_NUM_LINES [31:0] $end
$var parameter 32 ` UVM_SMALL_STRING [31:0] $end
$var parameter 32 a UVM_LARGE_STRING [31:0] $end

$scope function uvm_hdl_check_path $end
$var integer 32 b uvm_hdl_check_path $end
$upscope $end


$scope function uvm_hdl_deposit $end
$var reg 1024 c value [1023:0] $end
$var integer 32 d uvm_hdl_deposit $end
$upscope $end


$scope function uvm_hdl_force $end
$var reg 1024 e value [1023:0] $end
$var integer 32 f uvm_hdl_force $end
$upscope $end


$scope task uvm_hdl_force_time $end
$var reg 1024 g value [1023:0] $end
$var time 64 h force_time $end
$upscope $end


$scope function uvm_hdl_release_and_read $end
$var reg 1024 i value [1023:0] $end
$var integer 32 j uvm_hdl_release_and_read $end
$upscope $end


$scope function uvm_hdl_release $end
$var integer 32 k uvm_hdl_release $end
$upscope $end


$scope function uvm_hdl_read $end
$var reg 1024 l value [1023:0] $end
$var integer 32 m uvm_hdl_read $end
$upscope $end


$scope function uvm_dpi_get_next_arg_c $end
$var integer 32 n init $end
$upscope $end


$scope function uvm_dpi_get_tool_name_c $end
$upscope $end


$scope function uvm_dpi_get_tool_version_c $end
$upscope $end


$scope function uvm_dpi_get_next_arg $end
$var integer 32 o init $end
$upscope $end


$scope function uvm_dpi_get_tool_name $end
$upscope $end


$scope function uvm_dpi_get_tool_version $end
$upscope $end


$scope function uvm_dpi_regcomp $end
$upscope $end


$scope function uvm_dpi_regexec $end
$var integer 32 p uvm_dpi_regexec $end
$upscope $end


$scope function uvm_dpi_regfree $end
$upscope $end


$scope function uvm_re_match $end
$var integer 32 q uvm_re_match $end
$upscope $end


$scope function uvm_dump_re_cache $end
$upscope $end


$scope function uvm_glob_to_re $end
$upscope $end


$scope function uvm_revision_string $end
$upscope $end


$scope function uvm_radix_to_string $end
$var integer 32 r radix $end
$upscope $end


$scope function uvm_instance_scope $end
$var reg 8 s c [7:0] $end
$var integer 32 t pos $end

$scope begin 1unnblk $end
$var integer 32 u dot_pos $end
$var integer 32 v slash_cnt $end
$var integer 32 w slash_pos $end
$upscope $end

$upscope $end


$scope function uvm_oneway_hash $end
$var integer 32 x seed $end
$var integer 32 y uvm_oneway_hash $end
$var reg 1 z msb $end
$var reg 8 { current_byte [7:0] $end
$var reg 32 | crc1 [31:0] $end
$upscope $end


$scope function uvm_create_random_seed $end
$var integer 32 } uvm_create_random_seed $end
$upscope $end


$scope function uvm_object_value_str $end
$upscope $end


$scope function uvm_leaf_scope $end
$var reg 8 ~ scope_separator [7:0] $end
$var reg 8 !! bracket_match [7:0] $end
$var integer 32 "! pos $end
$var integer 32 #! bmatches $end
$upscope $end


$scope function get_radix_string_global $end
$var integer 32 $! radix $end
$upscope $end


$scope function uvm_bitstream_to_string $end
$var reg 4096 %! value [4095:0] $end
$var integer 32 &! size $end
$var integer 32 '! radix $end

$scope begin 24unnblk $end
$var reg 4096 (! _t [4095:0] $end
$upscope $end

$upscope $end


$scope function uvm_integral_to_string $end
$var reg 64 )! value [63:0] $end
$var integer 32 *! size $end
$var integer 32 +! radix $end

$scope begin 26unnblk $end
$var reg 64 ,! _t [63:0] $end
$upscope $end

$upscope $end


$scope function uvm_vector_to_string $end
$var reg 4096 -! value [4095:0] $end
$var integer 32 .! size $end
$var integer 32 /! radix $end
$upscope $end


$scope function uvm_get_array_index_int $end
$var reg 1 0! is_wildcard $end
$var integer 32 1! uvm_get_array_index_int $end
$var integer 32 2! i $end
$upscope $end


$scope function uvm_get_array_index_string $end
$var reg 1 3! is_wildcard $end
$var integer 32 4! i $end
$upscope $end


$scope function uvm_is_array $end
$var reg 1 5! uvm_is_array $end
$upscope $end


$scope function uvm_has_wildcard $end
$upscope $end


$scope function m_uvm_string_queue_join $end
$upscope $end


$scope task run_test $end
$upscope $end


$scope function global_stop_request $end
$upscope $end


$scope function set_global_timeout $end
$var time 64 6! timeout $end
$var reg 1 7! overridable $end
$upscope $end


$scope function set_global_stop_timeout $end
$var time 64 8! timeout $end
$upscope $end


$scope function uvm_get_report_object $end
$upscope $end


$scope function uvm_report_enabled $end
$var integer 32 9! verbosity $end
$var reg 2 :! severity $end
$var integer 32 ;! uvm_report_enabled $end
$upscope $end


$scope function uvm_report $end
$var reg 2 <! severity $end
$var integer 32 =! verbosity $end
$var integer 32 >! line $end
$var reg 1 ?! report_enabled_checked $end
$upscope $end


$scope function m__uvm_report_dpi $end
$var integer 32 @! severity $end
$var integer 32 A! verbosity $end
$var integer 32 B! line $end
$upscope $end


$scope function uvm_report_info $end
$var integer 32 C! verbosity $end
$var integer 32 D! line $end
$var reg 1 E! report_enabled_checked $end
$upscope $end


$scope function uvm_report_warning $end
$var integer 32 F! verbosity $end
$var integer 32 G! line $end
$var reg 1 H! report_enabled_checked $end
$upscope $end


$scope function uvm_report_error $end
$var integer 32 I! verbosity $end
$var integer 32 J! line $end
$var reg 1 K! report_enabled_checked $end
$upscope $end


$scope function uvm_report_fatal $end
$var integer 32 L! verbosity $end
$var integer 32 M! line $end
$var reg 1 N! report_enabled_checked $end
$upscope $end


$scope function uvm_process_report_message $end
$upscope $end


$scope function uvm_string_to_severity $end
$var reg 2 O! sev $end
$var reg 1 P! uvm_string_to_severity $end
$upscope $end


$scope function uvm_string_to_action $end
$upscope $end


$scope function set_config_int $end
$var reg 4096 Q! value [4095:0] $end
$upscope $end


$scope function set_config_object $end
$var reg 1 R! clone $end
$upscope $end


$scope function set_config_string $end
$upscope $end


$scope function uvm_is_match $end
$var reg 1 S! uvm_is_match $end
$upscope $end


$scope function uvm_string_to_bits $end
$var reg 115200 T! uvm_string_to_bits [115199:0] $end
$upscope $end


$scope function uvm_bits_to_string $end
$var reg 115200 U! str [115199:0] $end
$upscope $end


$scope task uvm_wait_for_nba_region $end
$var integer 32 V! nba $end
$var integer 32 W! next_nba $end
$upscope $end


$scope function uvm_split_string $end
$upscope $end


$scope function uvm_hdl_concat2string $end
$upscope $end

$upscope $end


$scope module apb_reg_pkg $end
$upscope $end


$scope module std $end

$scope function randomize $end
$var reg 1 X! randomize $end
$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b0 !
b0 "
b0 #
0$
0%
0&
1'
0(
0)
1*
b0 +
b0 ,
0-
0.
0/
b0 0
b0 1
b0 2
b0 3
b0 4
b0 5
b0 6
b11111111111111111111111111111111 7
18
b1000011111110111011111100011111 9
b10000000000 :
b1000000000000 ;
b1111000000000000000000000000 <
b10001 =
b10101010101 >
b101010101 ?
b101010101 @
b0 A
b1 B
b10 C
b100 D
b1000 E
b10000 F
b100000 G
b1000000 H
b10000000 I
b100000000 J
b1000000000 K
b10000000000000 L
b100000000000000 M
b1000000000000000 N
b10000000000000000 O
b100000000000000000 P
b100000000000000001 Q
b100000000000000010 R
b100000000000000011 S
b100000000000000100 T
b100000000000000101 U
b100000000000000110 V
b100000000000000110 W
b100000000000000111 X
b100000000000001000 Y
b100000000000001000 Z
b100110000010001110110110110 [
b1 \
b1000010 ]
b1111000 ^
b1111000 _
b1110111111 `
b11100000111111111 a
b0 b
bx c
b0 d
bx e
b0 f
bx g
bx h
bx i
b0 j
b0 k
bx l
b0 m
b0 n
b0 o
b0 p
b0 q
b0 r
b101110 s
b11011 t
b10001 u
b11 v
b11001 w
b1000011111110111011111100011111 x
b1011111011100010011011001100100 y
0z
b1110010 {
b10111010100010001000101011100100 |
b11010010010100111111101001010000 }
b0 ~
b0 !!
b0 "!
b0 #!
b0 $!
bx %!
b0 &!
b0 '!
bx (!
bx )!
b0 *!
b0 +!
bx ,!
bx -!
b0 .!
b0 /!
00!
b0 1!
b0 2!
03!
b0 4!
05!
bx 6!
07!
bx 8!
b111110100 9!
b0 :!
b0 ;!
b0 <!
b0 =!
b0 >!
0?!
b0 @!
b0 A!
b0 B!
b0 C!
b0 D!
0E!
b0 F!
b0 G!
0H!
b0 I!
b0 J!
0K!
b0 L!
b0 M!
0N!
b0 O!
0P!
bx Q!
0R!
0S!
bx T!
bx U!
b100100 V!
b100100 W!
0X!
$end
#10
1(
1)
1%
1$
b10 "
b10 ,
1.
1-
#20
0(
0)
#30
1(
1)
1&
1/
#40
0(
0)
#50
1(
1)
b100101 W!
b110010000 9!
b1011111011100010011011001100101 }
0%
0&
b100101 V!
b10 1
0/
0-
#60
0(
0)
#70
1(
1)
1%
b1111 "
b1111 ,
1-
#80
0(
0)
#90
1(
1)
1&
1/
#100
0(
0)
#110
1(
1)
b100110 W!
b100101100 9!
b11100011000110000011000000100101 y
b11111001100011101110001101100000 |
b1100100 {
0z
b11100011000110000011000000100101 }
b110010000 9!
b1011111011100010011011001100111 }
0%
0&
b100110 V!
b1111 1
0/
0-
#120
0(
0)
#130
1(
1)
1%
0$
0.
1-
#140
0(
0)
#150
1(
1)
1&
1/
#160
0(
0)
#170
1(
1)
b100111 W!
b110010000 9!
b1011111011100010011011001101010 }
0%
0&
b100111 V!
b1111 6
b1111 0
b1111 #
0/
0-
#180
0(
0)
#190
1(
1)
1%
1-
#200
0(
0)
#210
1(
1)
1&
1/
#220
0(
0)
#230
1(
1)
b101000 W!
b100101100 9!
b100110110011110101000011010110 y
b1001000011011100010110000011101 |
b1110010 {
1z
b100110110011110101000011010110 }
b110010000 9!
b1011111011100010011011001101110 }
0%
0&
b101000 V!
0/
0-
#240
0(
0)
#250
1(
1)
1%
1$
b100 !
b1010111011110000001000101110011 "
b1010111011110000001000101110011 ,
b100 +
1.
1-
#260
0(
0)
#270
1(
1)
1&
1/
#280
0(
0)
#290
1(
1)
b101001 W!
b110010000 9!
b1011111011100010011011001110011 }
0%
0&
b101001 V!
b1010111011110000001000101110011 2
0/
0-
#300
0(
0)
#310
1(
1)
1%
b10010011101010010111110110100001 "
b10010011101010010111110110100001 ,
1-
#320
0(
0)
#330
1(
1)
1&
1/
#340
0(
0)
#350
1(
1)
b101010 W!
b100101100 9!
b110110011001101101011110000111 y
b10010111111001111001010000001101 |
b1100100 {
1z
b110110011001101101011110000111 }
b110010000 9!
b1011111011100010011011001111001 }
0%
0&
b101010 V!
b10010011101010010111110110100001 2
0/
0-
#360
0(
0)
#370
1(
1)
1%
0$
0.
1-
#380
0(
0)
#390
1(
1)
1&
1/
#400
0(
0)
#410
1(
1)
b101011 W!
b110010000 9!
b1011111011100010011011010000000 }
0%
0&
b101011 V!
b10010011101010010111110110100001 6
b10010011101010010111110110100001 0
b10010011101010010111110110100001 #
0/
0-
#420
0(
0)
#430
1(
1)
1%
1-
#440
0(
0)
#450
1(
1)
1&
1/
#460
0(
0)
#470
1(
1)
b101100 W!
b100101100 9!
b10101001000111101100000010000111 y
b10010111111111101101110010011010 |
b1110010 {
0z
b10101001000111101100000010000111 }
b110010000 9!
b1011111011100010011011010001000 }
0%
0&
b101100 V!
0/
0-
#480
0(
0)
#490
1(
1)
1%
1$
b1000 !
b100000000100110110111111110110 "
b100000000100110110111111110110 ,
b1000 +
1.
1-
#500
0(
0)
#510
1(
1)
1&
1/
#520
0(
0)
#530
1(
1)
b101101 W!
b110010000 9!
b1011111011100010011011010010001 }
0%
0&
b101101 V!
b100000000100110110111111110110 3
0/
0-
#540
0(
0)
#550
1(
1)
1%
b101100100011111001000111111001 "
b101100100011111001000111111001 ,
1-
#560
0(
0)
#570
1(
1)
1&
1/
#580
0(
0)
#590
1(
1)
b101110 W!
b100101100 9!
b10111001100101110100011111010110 y
b1001000011101110110010010001010 |
b1100100 {
0z
b10111001100101110100011111010110 }
b110010000 9!
b1011111011100010011011010011011 }
0%
0&
b101110 V!
b101100100011111001000111111001 3
0/
0-
#600
0(
0)
#610
1(
1)
1%
0$
0.
1-
#620
0(
0)
#630
1(
1)
1&
1/
#640
0(
0)
#650
1(
1)
b101111 W!
b110010000 9!
b1011111011100010011011010100110 }
0%
0&
b101111 V!
b101100100011111001000111111001 6
b101100100011111001000111111001 0
b101100100011111001000111111001 #
0/
0-
#660
0(
0)
#670
1(
1)
1%
1-
#680
0(
0)
#690
1(
1)
1&
1/
#700
0(
0)
#710
1(
1)
b110000 W!
b100101100 9!
b110110100001000001110100100000 y
b11111110101000010111011100001101 |
b1110010 {
1z
b110110100001000001110100100000 }
b110010000 9!
b1011111011100010011011010110010 }
0%
0&
b110000 V!
0/
0-
#720
0(
0)
#730
1(
1)
1%
1$
b1100 !
b101011101010100001000100101001 "
b101011101010100001000100101001 ,
b1100 +
1.
1-
#740
0(
0)
#750
1(
1)
1&
1/
#760
0(
0)
#770
1(
1)
b110001 W!
b110010000 9!
b1011111011100010011011010111111 }
0%
0&
b110001 V!
b101011101010100001000100101001 4
0/
0-
#780
0(
0)
#790
1(
1)
1%
b10000110101010100111110100111101 "
b10000110101010100111110100111101 ,
1-
#800
0(
0)
#810
1(
1)
1&
1/
#820
0(
0)
#830
1(
1)
b110010 W!
b100101100 9!
b100110001011001001011011111101 y
b100001001010001100111100011101 |
b1100100 {
1z
b100110001011001001011011111101 }
b110010000 9!
b1011111011100010011011011001101 }
0%
0&
b110010 V!
b10000110101010100111110100111101 4
0/
0-
#840
0(
0)
#850
1(
1)
1%
0$
0.
1-
#860
0(
0)
#870
1(
1)
1&
1/
#880
0(
0)
#890
1(
1)
b110011 W!
b110010000 9!
b1011111011100010011011011011100 }
0%
0&
b110011 V!
b10000110101010100111110100111101 6
b10000110101010100111110100111101 0
b10000110101010100111110100111101 #
0/
0-
#900
0(
0)
#910
1(
1)
1%
1-
#920
0(
0)
#930
1(
1)
1&
1/
#940
0(
0)
#950
1(
1)
b110100 W!
b100101100 9!
b1000001110100010110100010100100 y
b1111010010101100010101000000010 |
b1110010 {
0z
b1000001110100010110100010100100 }
b110010000 9!
b1011111011100010011011011101100 }
0%
0&
b110100 V!
0/
0-
#960
0(
0)
#970
1(
1)
1%
1$
b10000 !
b101111100101001110101000100101 "
b101111100101001110101000100101 ,
b10000 +
1.
1-
#980
0(
0)
#990
1(
1)
1&
1/
#1000
0(
0)
#1010
1(
1)
b110101 W!
b110010000 9!
b1011111011100010011011011111101 }
0%
0&
b110101 V!
b101111100101001110101000100101 5
0/
0-
#1020
0(
0)
#1030
1(
1)
1%
b11111001111110100110110101100000 "
b11111001111110100110110101100000 ,
1-
#1040
0(
0)
#1050
1(
1)
1&
1/
#1060
0(
0)
#1070
1(
1)
b110110 W!
b100101100 9!
b110001011010001101111101111001 y
b10100101110111111001001000010010 |
b1100100 {
0z
b110001011010001101111101111001 }
b110010000 9!
b1011111011100010011011100001111 }
0%
0&
b110110 V!
b11111001111110100110110101100000 5
0/
0-
#1080
0(
0)
#1090
1(
1)
1%
0$
0.
1-
#1100
0(
0)
#1110
1(
1)
1&
1/
#1120
0(
0)
#1130
1(
1)
b110111 W!
b110010000 9!
b1011111011100010011011100100010 }
0%
0&
b110111 V!
b11111001111110100110110101100000 6
b11111001111110100110110101100000 0
b11111001111110100110110101100000 #
0/
0-
#1140
0(
0)
#1150
1(
1)
1%
1-
#1160
0(
0)
#1170
1(
1)
1&
1/
#1180
0(
0)
#1190
1(
1)
b111000 W!
b100101100 9!
0%
0&
b111000 V!
0/
0-
#1200
0(
0)
#1210
1(
1)
#1220
0(
0)
#1230
1(
1)
#1240
0(
0)
#1250
1(
1)
#1260
0(
0)
#1270
1(
1)
#1280
0(
0)
#1290
1(
1)
#1300
0(
0)
#1310
1(
1)
#1320
0(
0)
#1330
1(
1)
#1340
0(
0)
#1350
1(
1)
#1360
0(
0)
#1370
1(
1)
#1380
0(
0)
#1390
1(
1)
b111110100 9!
b111010 W!
b111010 V!
b111100 W!
b111100 V!
b10010001101011000101111111111011 }
b10010001101011000110000000001101 }
b10010001101011000110000000100000 }
b10011010110000101110011100110001 }
b1100100 9!
b1 ;!
b1100100 C!
b1101100101 D!
1E!
